#!/bin/bash
# rchat
# Simple rautafarmi chat client
# Licensed under GNU GPLv3.

RCHAT_EXIT()
{
  rm -f /tmp/rchat-editor-message /tmp/rchat-cchat ; clear ; exit 0
}

RCHAT_LOGOUT()
{
  rm -f /tmp/rchat-joined /tmp/rchat-editor-message /tmp/rchat-msg /tmp/rchat-cchat ; clear ; ${0} ; RCHAT_EXIT
}

RCHAT_INIT()
{
  DEFAULT_INSTANCE="https://donut.gq/rautafarmi"
  
  # Set instance if one already exists
  if [ -e "/tmp/rchat-instance" ]; then
		cat /tmp/rchat-instance > /dev/null
  else
		printf "$DEFAULT_INSTANCE" > /tmp/rchat-instance
  fi

  INSTANCE=$(cat /tmp/rchat-instance)
  REFRESH_TIMEOUT=3
  LINECOUNT="$(expr $(tput lines) "-" 4)" # How many lines to print
  MAXCHARACTERCOUNT="$(tput cols)"
  COLOR_01="$(printf '\033[0m')" # White
  COLOR_02="$(printf '\033[0;33m')" # Yellow
  COLOR_03="$(printf '\033[0;35m')" # Purple
  COLOR_04="$(printf '\033[0;36m')" # Blue
  COLOR_05="$(printf '\033[0;33m')" # Orange
  COLOR_06="$(printf '\033[0;31m')" # Red
  NAME="rchat" # rchat.. simple as that
  VERSION="1.1-12-06-2022" # Version of rchat
  SEP=â–€ # Separator that will be used for borders
  SEPCOUNT=$(tput cols)

  # Check what to set the nick to
  if [ -e "/tmp/rchat-nick" ]; then
		NICK=$(cat /tmp/rchat-nick)
  else
		NICK="anon"
  fi
  
  MODE="-- NORMAL --"
  RCHAT_URL="$INSTANCE/messages.txt"
  
  # Load rchat settings
  if [ -e "/tmp/rchat-settings" ]; then
		. /tmp/rchat-settings
  fi

  FSEP="$(seq $(tput cols) | xargs -Iz printf "${COLOR_02}$SEP${COLOR_01}")"

  # Download all messages from the instance
  RCHAT_DOWNLOAD_MESSAGES &

  # Check if an existing session is active
  if [ -e "/tmp/rchat-joined" ]; then
		printf "Existing session exists, joining.."
  else
		RCHAT_STARTER_HEADER
  fi
 
  # Check if an editor is defined, if not set it to vim
  if [ "$EDITOR" = "" ]; then
		EDITOR=vim
  fi
  
  # Config file
  if [ -e "~/.config/rchat/rchatrc" ]; then
		. ~/.config/rchat/rchatrc
  else
		mkdir -p ~/.config/rchat; touch ~/.config/rchat/rchatrc
  fi

  RCHAT_GREP_MESSAGES
}

RCHAT_DOWNLOAD_MESSAGES()
{
  sleep $REFRESH_TIMEOUT
  curl -so /tmp/rchat-msg "$RCHAT_URL" > /dev/null
}

RCHAT_STARTER_HEADER()
{
  clear
  printf "$NAME $VERSION\n"
  printf "$FSEP"
  printf "\n\n"
  printf "${COLOR_02}Last login: $(date '+%Y/%m/%d at %T')${COLOR_01}"
  printf "\n\nWelcome to $NAME $VERSION. $NAME is a rautafarmi chat client with Vim keybinds."
  printf "\n${COLOR_02}rchat is licensed under the GNU GPLv3 license. Client written by speedie & potential contributors, rautafarmi is owned by donut.gq.\n${COLOR_01}"
  printf "\n${COLOR_04}Type ':j' to join."
  printf "\n${COLOR_03}Type ':set instance' and then enter your instance URL to set an instance."
  printf "\n${COLOR_06}Type ':set instance default' to change it back.${COLOR_01}"
  printf "\n${COLOR_05}Type ':h' to get help.${COLOR_01}"
  printf "\n${COLOR_02}Type ':donate' to donate.${COLOR_01}"
  printf "\nType ':q' to quit.\n"
  read starter_command
  case "$starter_command" in
  ":q") RCHAT_EXIT ;;
  ":q!") RCHAT_EXIT ;;
  ":quit") RCHAT_EXIT ;;
  ":j") touch /tmp/rchat-joined && RCHAT_INIT ;;
  ":set instance") echo -n "Enter your instance: " ; read CUSTOM_INSTANCE ; printf "$CUSTOM_INSTANCE" > /tmp/rchat-instance && printf "\n${COLOR_06}000 - SYSTEM at $(date '+%Y/%m/%d %T:')\nSet instance to $CUSTOM_INSTANCE.${COLOR_01}" && sleep 3 && ${0} && RCHAT_EXIT ;;
  ":set instance default") echo $DEFAULT_INSTANCE > /tmp/rchat-instance && printf "${COLOR_06}\n000 - SYSTEM at $(date '+%Y/%m/%d %T:')\nSet instance to default.${COLOR_01}" && sleep 3 && ${0} && RCHAT_EXIT ;;
  ":h") RCHAT_HELP | less ;;
  ":help") RCHAT_HELP | less ;;
  ":changelog") RCHAT_CHANGELOG | less ;;
  ":donate") RCHAT_DONATE && $0 && RCHAT_EXIT ;;
  ":reset") RCHAT_RESET ;;
  esac
  
  # Confirm we joined
  if [ -e "/tmp/rchat-joined" ]; then
		printf "Joining"
  else
		${0} && RCHAT_EXIT
  fi
}

RCHAT_DONATE() {
  if [ -e "/usr/bin/xdg-open" ]; then
		xdg-open "https://speedie.gq/donate"
  else
		$BROWSER "https://speedie.gq/donate"
 fi
}

RCHAT_HEADER()
{
  printf "$NAME $VERSION\n"
  printf "$FSEP"
  #printf "\n\n"
}

RCHAT_CAT_MESSAGES()
{
  if [ -e "/tmp/rchat-msg" ]; then
		RCHAT_FULL_MESSAGE_DATA=$(cat /tmp/rchat-msg | sed -n 1,$LINECOUNT\p | sed "s/<span style='color: #2c49c9;'>/${COLOR_03}/" | sed "s/<span style='color: #1c8757;'>/${COLOR_05}- /" | sed "s|</span>||" | sed "s|</span> <span style='color: #727272;'>| ${COLOR_06}at ${COLOR_04}|" | sed "s|</span>|${COLOR_01}:|" | sed "s|:<span style='color: #aa2cc9;'>|${COLOR_03}|" | sed "s|</span>|:${COLOR_03}|" | sed "s|<span style='color: #789922;'>||" | sed "/.\{$MAXCHARACTERCOUNT\}/d" | sed "/^[[:space:]]*$/d")
		printf "$RCHAT_FULL_MESSAGE_DATA${COLOR_01}" > /tmp/rchat-cchat
		printf "$RCHAT_FULL_MESSAGE_DATA\n\n${COLOR_01}" >> /tmp/rchat-history
		printf "$(head -n "$(expr $(tput lines) "-" 6)" /tmp/rchat-cchat)${COLOR_01}\n" # I hate math in shell.
		printf "$FSEP"
		printf "\n${COLOR_04}I: $INSTANCE L: $LINECOUNT/$(cat /tmp/rchat-msg | wc -l) LL: $(date '+%Y/%m/%d at %T')${COLOR_01}\n"
		printf "$FSEP"
		printf "\n"
  else
		printf "\n${COLOR_06}\n000 - SYSTEM at $(date '+%Y/%m/%d %T:')\nDownloading messages.${COLOR_01}"; sleep 5 && clear && RCHAT_CAT_MESSAGES
  fi
}

RCHAT_GREP_MESSAGES()
{
  clear
  RCHAT_HEADER # Print the header/banner
  RCHAT_CAT_MESSAGES # Print the messages
  RCHAT_FOOTER # Print the footer/banner
  printf " $MODE \n" # Print the default mode
  RCHAT_CHECK_UPDATE
}

RCHAT_SEND_MESSAGE()
{
  case "$RCHAT_MESSAGE_TYPE" in
  "editor") curl -sX POST $INSTANCE/post.php -F "name=$NICK" -F "msg=$(cat /tmp/rchat-editor-message)" > /dev/null ;;
  "normal") curl -sX POST $INSTANCE/post.php -F "name=$NICK" -F "msg=$RCHAT_SEND_MESSAGE" > /dev/null ;;
  esac
  printf "${COLOR_06}\n000 - SYSTEM at $(date '+%Y/%m/%d %T:')\nMessage '$RCHAT_SEND_MESSAGE' sent. ${COLOR_01}" && sleep 0.5
  clear
  ${0} && RCHAT_EXIT
}

RCHAT_CHECK_UPDATE()
{
  case "$(cat /tmp/rchat-msg)" in
  "$(curl -s $RCHAT_URL)") RCHAT_CHECK_MODE ;;
  esac

  if [ "$MAXCHARACTERCOUNT" = "$(tput cols)" ]; then
		MAXCHARACTERCOUNT=$(tput cols)
  else
		MAXCHARACTERCOUNT=$(tput cols)
  fi

  if [ "$SEPCOUNT" = "$(tput cols)" ]; then
		SEPCOUNT=$(tput cols)
  else
		SEPCOUNT=$(tput cols)
  fi

  if [ "$MAXCHARACTERCOUNT" = "$(tput cols)" ]; then
		MAXCHARACTERCOUNT=$(tput cols)
  else
		MAXCHARACTERCOUNT=$(tput cols)
  fi

  ${0} && RCHAT_EXIT # Reset the script if there are new messages
}

RCHAT_GREP_MESSAGES()
{
  clear
  RCHAT_HEADER # Print the header/banner
  RCHAT_CAT_MESSAGES # Print the messages
  printf " $MODE " # Print the default mode
  RCHAT_CHECK_UPDATE
}

RCHAT_INSERT()
{
  clear && RCHAT_HEADER && RCHAT_CAT_MESSAGES

  case "$MODE" in
  "INSERT") MODE="INSERT" ;;
  esac

  echo -n "-- $MODE -- "
  read RCHAT_SEND_MESSAGE && RCHAT_MESSAGE_TYPE=normal

  # Reload if it's empty
  case "$RCHAT_SEND_MESSAGE" in
  "") ${0} && RCHAT_EXIT ;;
  "^[") ${0} && RCHAT_EXIT ;;
  esac

  RCHAT_SEND_MESSAGE ; ${0} && RCHAT_EXIT
}

RCHAT_CHECK_UPDATE()
{
  case "$(cat /tmp/rchat-msg)" in
  "$(curl -s $RCHAT_URL)") RCHAT_CHECK_MODE ;;
  esac
  ${0} && RCHAT_EXIT # Reset the script if there are new messages
}

RCHAT_CMD()
{
  clear && RCHAT_HEADER && RCHAT_CAT_MESSAGES
  echo -n ":" && read CMD
  case "$CMD" in
  "q") RCHAT_EXIT ;;
  "leave") RCHAT_LOGOUT ;;
  "h") RCHAT_HELP | less ;;
  "help") RCHAT_HELP | less ;;
  "r") ${0} && RCHAT_EXIT ;;
  "reset") RCHAT_RESET ;;
  "set nick") echo -n "Enter nick: " && read NICK && echo $NICK > /tmp/rchat-nick && ${0} && RCHAT_EXIT ;;
  "set refreshdelay") echo -n "How many seconds: " && read refreshdelay && printf "REFRESHDELAY=$REFRESHDELAY\n" >> /tmp/rchat-settings ;;
  "set sep") echo -n "What should your separator be?: " && read SEP && printf "SEP=$SEP\n" >> /tmp/rchat-settings ;;
  "!") echo -n "What shell command should run? " && read RCHAT_SHELL_COMMAND && "/bin/sh -c" "$RCHAT_SHELL_COMMAND" && ${0} && RCHAT_EXIT ;;
  "history") less /tmp/rchat-history ; ${0} && RCHAT_EXIT ;;
  "history clear") rm /tmp/rchat-history ; ${0} && RCHAT_EXIT ;;
  "changelog") RCHAT_CHANGELOG | less ;;
  "news") RCHAT_NEWS | less ;;
  "instance") RCHAT_INSTANCE_LIST | less ;;
  "e") $EDITOR /tmp/rchat-editor-message && RCHAT_MESSAGE_TYPE=editor && RCHAT_SEND_MESSAGE ;;
  "donate") RCHAT_DONATE && $0 && RCHAT_EXIT ;;
  esac
  ${0} && RCHAT_EXIT
}

# Help screen
RCHAT_HELP()
{
  printf "${COLOR_02}-- rchat help | Use hjkl to read --\n\n"
  printf "${COLOR_01}rchat is a chat client with Vim keybinds. To enter text, press I at any time.\n"
  printf "When you initially run it from a terminal, you need to join.\n"
  printf "Joining is done using a command. Commands in rchat are used similar to Vim. This means most commands start with ':'.\n\n" 
  printf "${COLOR_04}-- COMMANDS --${COLOR_01}"
  printf "-${COLOR_03} To join the set instance, type ':j'. *CAN ONLY BE DONE IF YOU AREN'T ALREADY IN AN INSTANCE*"
  printf "\n-${COLOR_03} To set an instance (Otherwise the default will be used), type ':set instance'. *CAN ONLY BE DONE IF YOU AREN'T ALREADY IN AN INSTANCE*"
  printf "\n-${COLOR_03} If you wanna run a terminal command, type ':!'."
  printf "\n-${COLOR_03} To see the help screen, do ':h'."
  printf "\n-${COLOR_03} To change your nickname from '$NICK' to anything you want, ':set nick'."
  printf "\n-${COLOR_03} To change how often messages are downloaded, ':set refreshdelay'. *PLEASE DO NOT ABUSE THIS*"
  printf "\n-${COLOR_03} To change separator, ':set sep'."
  printf "\n-${COLOR_03} To reset settings, ':reset'."
  printf "\n-${COLOR_03} To change colors, ':set color1', ':set color2', ':set color3', ':set color4', ':set color5', ':set color6'."
  printf "\n-${COLOR_03} To see the changelog, type ':changelog'."
  printf "\n-${COLOR_03} To type out a message in your defined $EDITOR, type ':e'."
  printf "\n-${COLOR_03} To see a list of popular instances, type ':instance'."
  printf "\n-${COLOR_03} To download and see news, type ':news'."
  printf "\n-${COLOR_03} To see a full list of all messages downloaded combined, type ':history'."
  printf "\n-${COLOR_03} To clear the saved history, type ':history clear'."
  printf "\n-${COLOR_03} To leave the instance, type ':leave'."
  printf "\n-${COLOR_03} To quit rchat (You'll stay logged in), type ':q'.${COLOR_01}"
  printf "\n-${COLOR_03} To donate, type ':donate'.${COLOR_01}"
}

RCHAT_CHANGELOG()
{
  printf "${COLOR_04}rchat 0.1 (Released 2022-04-18): Initial release"
  printf "\n${COLOR_04}rchat 0.1 (Released 2022-04-18-r2): Added color support, writing messages in \$EDITOR and config file"
  printf "\n${COLOR_04}rchat 0.2 (Released 2022-04-19): Added custom instance support and fixed sysop garbage being printed when it shouldn't. Also performed other minor improvements."
  printf "\n${COLOR_04}rchat 0.2 (Released 2022-04-19-r2): Small aesthetic tweaks and defined \$EDITOR if it wasn't already."
  printf "\n${COLOR_04}rchat 0.3 (Released 2022-04-20): Removed more trash present in some instances, added :news and :instance commands and other small tweaks."
  printf "\n${COLOR_04}rchat 0.4 (Released 2022-04-24): Added :history, :history clear and other bug fixes."
  printf "\n${COLOR_04}rchat 0.5 (Released 2022-04-26): Added :set refreshdelay and other fixes."
  printf "\n${COLOR_04}rchat 1.0 (Released 2022-06-07): 1.0 release, bug fixes, added colors for :help, added config file support, removed useless bash-isms. Also added fancy borders and messages now fit into exactly your terminal size." 
  printf "\n${COLOR_04}rchat 1.1 (Released 2022-06-12): Fixed terminal size issues and :donate command."
}

RCHAT_RESET() {
  rm -rf /tmp/rchat* && rm -rf ~/.config/rchat && ${0} && RCHAT_EXIT
}

RCHAT_NEWS()
{
  curl -so /tmp/rchat-news https://raw.githubusercontent.com/speediegq/rchat/main/rchat-news  
  cat /tmp/rchat-news | less
  rm /tmp/rchat-news
}

# Print instance list
RCHAT_INSTANCE_LIST()
{
  curl -so /tmp/rchat-instance-list https://raw.githubusercontent.com/speediegq/rchat/main/rchat-instance-list

  if [ -e "/tmp/rchat-instance-list" ]; then
		cat /tmp/rchat-instance-list | less
		rm -f /tmp/rchat-instance-list
  fi
}

# Check what mode we're in
RCHAT_CHECK_MODE()
{
  read -t 1 -n 1 MODE
  case "$MODE" in
  "i") MODE="INSERT" && RCHAT_INSERT ;;
  "") MODE="NORMAL" && RCHAT_CHECK_UPDATE ;;
  ":") RCHAT_CMD ;;
  "q") RCHAT_EXIT ;;
  "l") RCHAT_LOGOUT ;;
esac

${0} && RCHAT_EXIT
}

# Bottom
RCHAT_INIT
RCHAT_CHECK_UPDATE
